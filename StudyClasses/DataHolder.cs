using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Serialization;

namespace StudyClasses
{
    // 7. Izveidot klasi(vai klases), kas satur kolekcijas(vai kādas citas datu struktūras)
    // ar punktos 1-6 minēto klašu instancēm.
    [Serializable]
    [XmlInclude(typeof(Teacher))]
    [XmlInclude(typeof(Student))]
    [XmlInclude(typeof(Course))]
    [XmlInclude(typeof(Assignment))]
    [XmlInclude(typeof(Submission))]
    public class DataHolder
    {
        // generated by copilot
        public List<Teacher> Teachers { get; set; }
        public List<Student> Students { get; set; }
        public List<Course> Courses { get; set; }
        public List<Assignment> Assignments { get; set; }
        public List<Submission> Submissions { get; set; }

        public DataHolder()
        {
            Teachers = new List<Teacher>();
            Students = new List<Student>();
            Courses = new List<Course>();
            Assignments = new List<Assignment>();
            Submissions = new List<Submission>();
        }
        // Mehods to add data to the lists
        public void AddTeacher(Teacher teacher)
        {
            Teachers.Add(teacher);
        }

        public void AddStudent(Student student)
        {
            Students.Add(student);
        }

        public void AddCourse(Course course)
        {
            Courses.Add(course);
        }

        public void AddAssignment(Assignment assignment)
        {
            Assignments.Add(assignment);
        }

        public void AddSubmission(Submission submission)
        {
            Submissions.Add(submission);
        }
        // copilot ends here

        // Method to turn a list into a string
        public string ListToString<T>(List<T> list) // asked copilot how to pass a generic list to a method
        {
            string result = "";
            foreach (var listItem in list)
            {
                result += listItem.ToString() + Environment.NewLine + Environment.NewLine;
            }
            return result;
        }
    }
}
